// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.3
// source: proxy.proto

package andproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyClient interface {
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadServers(ctx context.Context, in *ReadServersRequest, opts ...grpc.CallOption) (*ReadServersResponse, error)
	CreateServerPool(ctx context.Context, in *CreateServerPoolRequest, opts ...grpc.CallOption) (*CreateServerPoolResponse, error)
	UpdateServerPool(ctx context.Context, in *UpdateServerPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteServerPool(ctx context.Context, in *DeleteServerPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadServerPools(ctx context.Context, in *ReadServerPoolsRequest, opts ...grpc.CallOption) (*ReadServerPoolsResponse, error)
	CreateProxyFilter(ctx context.Context, in *CreateProxyFilterRequest, opts ...grpc.CallOption) (*CreateProxyFilterResponse, error)
	UpdateProxyFilter(ctx context.Context, in *UpdateProxyFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteProxyFilter(ctx context.Context, in *DeleteProxyFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadProxyFilters(ctx context.Context, in *ReadProxyFiltersRequest, opts ...grpc.CallOption) (*ReadProxyFiltersResponse, error)
	CreateL4Handler(ctx context.Context, in *CreateL4HandlerRequest, opts ...grpc.CallOption) (*CreateL4HandlerResponse, error)
	UpdateL4Handler(ctx context.Context, in *UpdateL4HandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteL4Handler(ctx context.Context, in *DeleteL4HandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadL4Handlers(ctx context.Context, in *ReadL4HandlersRequest, opts ...grpc.CallOption) (*ReadL4HandlersResponse, error)
	CreateAcl(ctx context.Context, in *CreateAclRequest, opts ...grpc.CallOption) (*CreateAclResponse, error)
	UpdateAcl(ctx context.Context, in *UpdateAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAcl(ctx context.Context, in *DeleteAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadAcls(ctx context.Context, in *ReadAclsRequest, opts ...grpc.CallOption) (*ReadAclsResponse, error)
	CreateHttpPath(ctx context.Context, in *CreateHttpPathRequest, opts ...grpc.CallOption) (*CreateHttpPathResponse, error)
	UpdateHttpPath(ctx context.Context, in *UpdateHttpPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteHttpPath(ctx context.Context, in *DeleteHttpPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadHttpPaths(ctx context.Context, in *ReadHttpPathsRequest, opts ...grpc.CallOption) (*ReadHttpPathsResponse, error)
	CreateHttpHost(ctx context.Context, in *CreateHttpHostRequest, opts ...grpc.CallOption) (*CreateHttpHostResponse, error)
	UpdateHttpHost(ctx context.Context, in *UpdateHttpHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteHttpHost(ctx context.Context, in *DeleteHttpHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadHttpHosts(ctx context.Context, in *ReadHttpHostsRequest, opts ...grpc.CallOption) (*ReadHttpHostsResponse, error)
	CreateHttpHandler(ctx context.Context, in *CreateHttpHandlerRequest, opts ...grpc.CallOption) (*CreateHttpHandlerResponse, error)
	UpdateHttpHandler(ctx context.Context, in *UpdateHttpHandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteHttpHandler(ctx context.Context, in *DeleteHttpHandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadHttpHandlers(ctx context.Context, in *ReadHttpHandlersRequest, opts ...grpc.CallOption) (*ReadHttpHandlersResponse, error)
	GetServersStats(ctx context.Context, in *GetServersStatsRequest, opts ...grpc.CallOption) (*GetServersStatsResponse, error)
	GetServerStats(ctx context.Context, in *GetServerStatsRequest, opts ...grpc.CallOption) (*GetServerStatsResponse, error)
	GetServersConnStats(ctx context.Context, in *GetServersConnStatsRequest, opts ...grpc.CallOption) (*GetServersConnStatsResponse, error)
	GetServerConnStats(ctx context.Context, in *GetServerConnStatsRequest, opts ...grpc.CallOption) (*GetServerConnStatsResponse, error)
	GetHandlersStats(ctx context.Context, in *GetHandlersStatsRequest, opts ...grpc.CallOption) (*GetHandlersStatsResponse, error)
	GetHandlerStats(ctx context.Context, in *GetHandlerRequest, opts ...grpc.CallOption) (*GetHandlerResponse, error)
}

type proxyClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyClient(cc grpc.ClientConnInterface) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateServer(ctx context.Context, in *UpdateServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteServer(ctx context.Context, in *DeleteServerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadServers(ctx context.Context, in *ReadServersRequest, opts ...grpc.CallOption) (*ReadServersResponse, error) {
	out := new(ReadServersResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateServerPool(ctx context.Context, in *CreateServerPoolRequest, opts ...grpc.CallOption) (*CreateServerPoolResponse, error) {
	out := new(CreateServerPoolResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateServerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateServerPool(ctx context.Context, in *UpdateServerPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateServerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteServerPool(ctx context.Context, in *DeleteServerPoolRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteServerPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadServerPools(ctx context.Context, in *ReadServerPoolsRequest, opts ...grpc.CallOption) (*ReadServerPoolsResponse, error) {
	out := new(ReadServerPoolsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadServerPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateProxyFilter(ctx context.Context, in *CreateProxyFilterRequest, opts ...grpc.CallOption) (*CreateProxyFilterResponse, error) {
	out := new(CreateProxyFilterResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateProxyFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateProxyFilter(ctx context.Context, in *UpdateProxyFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateProxyFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteProxyFilter(ctx context.Context, in *DeleteProxyFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteProxyFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadProxyFilters(ctx context.Context, in *ReadProxyFiltersRequest, opts ...grpc.CallOption) (*ReadProxyFiltersResponse, error) {
	out := new(ReadProxyFiltersResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadProxyFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateL4Handler(ctx context.Context, in *CreateL4HandlerRequest, opts ...grpc.CallOption) (*CreateL4HandlerResponse, error) {
	out := new(CreateL4HandlerResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateL4Handler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateL4Handler(ctx context.Context, in *UpdateL4HandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateL4Handler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteL4Handler(ctx context.Context, in *DeleteL4HandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteL4Handler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadL4Handlers(ctx context.Context, in *ReadL4HandlersRequest, opts ...grpc.CallOption) (*ReadL4HandlersResponse, error) {
	out := new(ReadL4HandlersResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadL4Handlers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateAcl(ctx context.Context, in *CreateAclRequest, opts ...grpc.CallOption) (*CreateAclResponse, error) {
	out := new(CreateAclResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateAcl(ctx context.Context, in *UpdateAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteAcl(ctx context.Context, in *DeleteAclRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteAcl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadAcls(ctx context.Context, in *ReadAclsRequest, opts ...grpc.CallOption) (*ReadAclsResponse, error) {
	out := new(ReadAclsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadAcls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateHttpPath(ctx context.Context, in *CreateHttpPathRequest, opts ...grpc.CallOption) (*CreateHttpPathResponse, error) {
	out := new(CreateHttpPathResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateHttpPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateHttpPath(ctx context.Context, in *UpdateHttpPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateHttpPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteHttpPath(ctx context.Context, in *DeleteHttpPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteHttpPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadHttpPaths(ctx context.Context, in *ReadHttpPathsRequest, opts ...grpc.CallOption) (*ReadHttpPathsResponse, error) {
	out := new(ReadHttpPathsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadHttpPaths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateHttpHost(ctx context.Context, in *CreateHttpHostRequest, opts ...grpc.CallOption) (*CreateHttpHostResponse, error) {
	out := new(CreateHttpHostResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateHttpHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateHttpHost(ctx context.Context, in *UpdateHttpHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateHttpHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteHttpHost(ctx context.Context, in *DeleteHttpHostRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteHttpHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadHttpHosts(ctx context.Context, in *ReadHttpHostsRequest, opts ...grpc.CallOption) (*ReadHttpHostsResponse, error) {
	out := new(ReadHttpHostsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadHttpHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) CreateHttpHandler(ctx context.Context, in *CreateHttpHandlerRequest, opts ...grpc.CallOption) (*CreateHttpHandlerResponse, error) {
	out := new(CreateHttpHandlerResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/CreateHttpHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) UpdateHttpHandler(ctx context.Context, in *UpdateHttpHandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/UpdateHttpHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) DeleteHttpHandler(ctx context.Context, in *DeleteHttpHandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Proxy/DeleteHttpHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) ReadHttpHandlers(ctx context.Context, in *ReadHttpHandlersRequest, opts ...grpc.CallOption) (*ReadHttpHandlersResponse, error) {
	out := new(ReadHttpHandlersResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/ReadHttpHandlers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetServersStats(ctx context.Context, in *GetServersStatsRequest, opts ...grpc.CallOption) (*GetServersStatsResponse, error) {
	out := new(GetServersStatsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/GetServersStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetServerStats(ctx context.Context, in *GetServerStatsRequest, opts ...grpc.CallOption) (*GetServerStatsResponse, error) {
	out := new(GetServerStatsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/GetServerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetServersConnStats(ctx context.Context, in *GetServersConnStatsRequest, opts ...grpc.CallOption) (*GetServersConnStatsResponse, error) {
	out := new(GetServersConnStatsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/GetServersConnStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetServerConnStats(ctx context.Context, in *GetServerConnStatsRequest, opts ...grpc.CallOption) (*GetServerConnStatsResponse, error) {
	out := new(GetServerConnStatsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/GetServerConnStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetHandlersStats(ctx context.Context, in *GetHandlersStatsRequest, opts ...grpc.CallOption) (*GetHandlersStatsResponse, error) {
	out := new(GetHandlersStatsResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/GetHandlersStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetHandlerStats(ctx context.Context, in *GetHandlerRequest, opts ...grpc.CallOption) (*GetHandlerResponse, error) {
	out := new(GetHandlerResponse)
	err := c.cc.Invoke(ctx, "/proto.Proxy/GetHandlerStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
// All implementations must embed UnimplementedProxyServer
// for forward compatibility
type ProxyServer interface {
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	UpdateServer(context.Context, *UpdateServerRequest) (*emptypb.Empty, error)
	DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error)
	ReadServers(context.Context, *ReadServersRequest) (*ReadServersResponse, error)
	CreateServerPool(context.Context, *CreateServerPoolRequest) (*CreateServerPoolResponse, error)
	UpdateServerPool(context.Context, *UpdateServerPoolRequest) (*emptypb.Empty, error)
	DeleteServerPool(context.Context, *DeleteServerPoolRequest) (*emptypb.Empty, error)
	ReadServerPools(context.Context, *ReadServerPoolsRequest) (*ReadServerPoolsResponse, error)
	CreateProxyFilter(context.Context, *CreateProxyFilterRequest) (*CreateProxyFilterResponse, error)
	UpdateProxyFilter(context.Context, *UpdateProxyFilterRequest) (*emptypb.Empty, error)
	DeleteProxyFilter(context.Context, *DeleteProxyFilterRequest) (*emptypb.Empty, error)
	ReadProxyFilters(context.Context, *ReadProxyFiltersRequest) (*ReadProxyFiltersResponse, error)
	CreateL4Handler(context.Context, *CreateL4HandlerRequest) (*CreateL4HandlerResponse, error)
	UpdateL4Handler(context.Context, *UpdateL4HandlerRequest) (*emptypb.Empty, error)
	DeleteL4Handler(context.Context, *DeleteL4HandlerRequest) (*emptypb.Empty, error)
	ReadL4Handlers(context.Context, *ReadL4HandlersRequest) (*ReadL4HandlersResponse, error)
	CreateAcl(context.Context, *CreateAclRequest) (*CreateAclResponse, error)
	UpdateAcl(context.Context, *UpdateAclRequest) (*emptypb.Empty, error)
	DeleteAcl(context.Context, *DeleteAclRequest) (*emptypb.Empty, error)
	ReadAcls(context.Context, *ReadAclsRequest) (*ReadAclsResponse, error)
	CreateHttpPath(context.Context, *CreateHttpPathRequest) (*CreateHttpPathResponse, error)
	UpdateHttpPath(context.Context, *UpdateHttpPathRequest) (*emptypb.Empty, error)
	DeleteHttpPath(context.Context, *DeleteHttpPathRequest) (*emptypb.Empty, error)
	ReadHttpPaths(context.Context, *ReadHttpPathsRequest) (*ReadHttpPathsResponse, error)
	CreateHttpHost(context.Context, *CreateHttpHostRequest) (*CreateHttpHostResponse, error)
	UpdateHttpHost(context.Context, *UpdateHttpHostRequest) (*emptypb.Empty, error)
	DeleteHttpHost(context.Context, *DeleteHttpHostRequest) (*emptypb.Empty, error)
	ReadHttpHosts(context.Context, *ReadHttpHostsRequest) (*ReadHttpHostsResponse, error)
	CreateHttpHandler(context.Context, *CreateHttpHandlerRequest) (*CreateHttpHandlerResponse, error)
	UpdateHttpHandler(context.Context, *UpdateHttpHandlerRequest) (*emptypb.Empty, error)
	DeleteHttpHandler(context.Context, *DeleteHttpHandlerRequest) (*emptypb.Empty, error)
	ReadHttpHandlers(context.Context, *ReadHttpHandlersRequest) (*ReadHttpHandlersResponse, error)
	GetServersStats(context.Context, *GetServersStatsRequest) (*GetServersStatsResponse, error)
	GetServerStats(context.Context, *GetServerStatsRequest) (*GetServerStatsResponse, error)
	GetServersConnStats(context.Context, *GetServersConnStatsRequest) (*GetServersConnStatsResponse, error)
	GetServerConnStats(context.Context, *GetServerConnStatsRequest) (*GetServerConnStatsResponse, error)
	GetHandlersStats(context.Context, *GetHandlersStatsRequest) (*GetHandlersStatsResponse, error)
	GetHandlerStats(context.Context, *GetHandlerRequest) (*GetHandlerResponse, error)
	mustEmbedUnimplementedProxyServer()
}

// UnimplementedProxyServer must be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (UnimplementedProxyServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedProxyServer) UpdateServer(context.Context, *UpdateServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServer not implemented")
}
func (UnimplementedProxyServer) DeleteServer(context.Context, *DeleteServerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServer not implemented")
}
func (UnimplementedProxyServer) ReadServers(context.Context, *ReadServersRequest) (*ReadServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServers not implemented")
}
func (UnimplementedProxyServer) CreateServerPool(context.Context, *CreateServerPoolRequest) (*CreateServerPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServerPool not implemented")
}
func (UnimplementedProxyServer) UpdateServerPool(context.Context, *UpdateServerPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServerPool not implemented")
}
func (UnimplementedProxyServer) DeleteServerPool(context.Context, *DeleteServerPoolRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServerPool not implemented")
}
func (UnimplementedProxyServer) ReadServerPools(context.Context, *ReadServerPoolsRequest) (*ReadServerPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadServerPools not implemented")
}
func (UnimplementedProxyServer) CreateProxyFilter(context.Context, *CreateProxyFilterRequest) (*CreateProxyFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProxyFilter not implemented")
}
func (UnimplementedProxyServer) UpdateProxyFilter(context.Context, *UpdateProxyFilterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProxyFilter not implemented")
}
func (UnimplementedProxyServer) DeleteProxyFilter(context.Context, *DeleteProxyFilterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProxyFilter not implemented")
}
func (UnimplementedProxyServer) ReadProxyFilters(context.Context, *ReadProxyFiltersRequest) (*ReadProxyFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadProxyFilters not implemented")
}
func (UnimplementedProxyServer) CreateL4Handler(context.Context, *CreateL4HandlerRequest) (*CreateL4HandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateL4Handler not implemented")
}
func (UnimplementedProxyServer) UpdateL4Handler(context.Context, *UpdateL4HandlerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateL4Handler not implemented")
}
func (UnimplementedProxyServer) DeleteL4Handler(context.Context, *DeleteL4HandlerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteL4Handler not implemented")
}
func (UnimplementedProxyServer) ReadL4Handlers(context.Context, *ReadL4HandlersRequest) (*ReadL4HandlersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadL4Handlers not implemented")
}
func (UnimplementedProxyServer) CreateAcl(context.Context, *CreateAclRequest) (*CreateAclResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAcl not implemented")
}
func (UnimplementedProxyServer) UpdateAcl(context.Context, *UpdateAclRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAcl not implemented")
}
func (UnimplementedProxyServer) DeleteAcl(context.Context, *DeleteAclRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAcl not implemented")
}
func (UnimplementedProxyServer) ReadAcls(context.Context, *ReadAclsRequest) (*ReadAclsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAcls not implemented")
}
func (UnimplementedProxyServer) CreateHttpPath(context.Context, *CreateHttpPathRequest) (*CreateHttpPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHttpPath not implemented")
}
func (UnimplementedProxyServer) UpdateHttpPath(context.Context, *UpdateHttpPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHttpPath not implemented")
}
func (UnimplementedProxyServer) DeleteHttpPath(context.Context, *DeleteHttpPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHttpPath not implemented")
}
func (UnimplementedProxyServer) ReadHttpPaths(context.Context, *ReadHttpPathsRequest) (*ReadHttpPathsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHttpPaths not implemented")
}
func (UnimplementedProxyServer) CreateHttpHost(context.Context, *CreateHttpHostRequest) (*CreateHttpHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHttpHost not implemented")
}
func (UnimplementedProxyServer) UpdateHttpHost(context.Context, *UpdateHttpHostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHttpHost not implemented")
}
func (UnimplementedProxyServer) DeleteHttpHost(context.Context, *DeleteHttpHostRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHttpHost not implemented")
}
func (UnimplementedProxyServer) ReadHttpHosts(context.Context, *ReadHttpHostsRequest) (*ReadHttpHostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHttpHosts not implemented")
}
func (UnimplementedProxyServer) CreateHttpHandler(context.Context, *CreateHttpHandlerRequest) (*CreateHttpHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHttpHandler not implemented")
}
func (UnimplementedProxyServer) UpdateHttpHandler(context.Context, *UpdateHttpHandlerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHttpHandler not implemented")
}
func (UnimplementedProxyServer) DeleteHttpHandler(context.Context, *DeleteHttpHandlerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHttpHandler not implemented")
}
func (UnimplementedProxyServer) ReadHttpHandlers(context.Context, *ReadHttpHandlersRequest) (*ReadHttpHandlersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadHttpHandlers not implemented")
}
func (UnimplementedProxyServer) GetServersStats(context.Context, *GetServersStatsRequest) (*GetServersStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersStats not implemented")
}
func (UnimplementedProxyServer) GetServerStats(context.Context, *GetServerStatsRequest) (*GetServerStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerStats not implemented")
}
func (UnimplementedProxyServer) GetServersConnStats(context.Context, *GetServersConnStatsRequest) (*GetServersConnStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServersConnStats not implemented")
}
func (UnimplementedProxyServer) GetServerConnStats(context.Context, *GetServerConnStatsRequest) (*GetServerConnStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerConnStats not implemented")
}
func (UnimplementedProxyServer) GetHandlersStats(context.Context, *GetHandlersStatsRequest) (*GetHandlersStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHandlersStats not implemented")
}
func (UnimplementedProxyServer) GetHandlerStats(context.Context, *GetHandlerRequest) (*GetHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHandlerStats not implemented")
}
func (UnimplementedProxyServer) mustEmbedUnimplementedProxyServer() {}

// UnsafeProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServer will
// result in compilation errors.
type UnsafeProxyServer interface {
	mustEmbedUnimplementedProxyServer()
}

func RegisterProxyServer(s grpc.ServiceRegistrar, srv ProxyServer) {
	s.RegisterService(&Proxy_ServiceDesc, srv)
}

func _Proxy_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateServer(ctx, req.(*UpdateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteServer(ctx, req.(*DeleteServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadServers(ctx, req.(*ReadServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateServerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateServerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateServerPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateServerPool(ctx, req.(*CreateServerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateServerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateServerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateServerPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateServerPool(ctx, req.(*UpdateServerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteServerPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServerPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteServerPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteServerPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteServerPool(ctx, req.(*DeleteServerPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadServerPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadServerPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadServerPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadServerPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadServerPools(ctx, req.(*ReadServerPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateProxyFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProxyFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateProxyFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateProxyFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateProxyFilter(ctx, req.(*CreateProxyFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateProxyFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProxyFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateProxyFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateProxyFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateProxyFilter(ctx, req.(*UpdateProxyFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteProxyFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProxyFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteProxyFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteProxyFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteProxyFilter(ctx, req.(*DeleteProxyFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadProxyFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProxyFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadProxyFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadProxyFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadProxyFilters(ctx, req.(*ReadProxyFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateL4Handler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateL4HandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateL4Handler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateL4Handler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateL4Handler(ctx, req.(*CreateL4HandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateL4Handler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateL4HandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateL4Handler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateL4Handler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateL4Handler(ctx, req.(*UpdateL4HandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteL4Handler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteL4HandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteL4Handler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteL4Handler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteL4Handler(ctx, req.(*DeleteL4HandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadL4Handlers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadL4HandlersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadL4Handlers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadL4Handlers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadL4Handlers(ctx, req.(*ReadL4HandlersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateAcl(ctx, req.(*CreateAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateAcl(ctx, req.(*UpdateAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteAcl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAclRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteAcl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteAcl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteAcl(ctx, req.(*DeleteAclRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadAcls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAclsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadAcls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadAcls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadAcls(ctx, req.(*ReadAclsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateHttpPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHttpPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateHttpPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateHttpPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateHttpPath(ctx, req.(*CreateHttpPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateHttpPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHttpPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateHttpPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateHttpPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateHttpPath(ctx, req.(*UpdateHttpPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteHttpPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHttpPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteHttpPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteHttpPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteHttpPath(ctx, req.(*DeleteHttpPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadHttpPaths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHttpPathsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadHttpPaths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadHttpPaths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadHttpPaths(ctx, req.(*ReadHttpPathsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateHttpHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHttpHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateHttpHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateHttpHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateHttpHost(ctx, req.(*CreateHttpHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateHttpHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHttpHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateHttpHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateHttpHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateHttpHost(ctx, req.(*UpdateHttpHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteHttpHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHttpHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteHttpHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteHttpHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteHttpHost(ctx, req.(*DeleteHttpHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadHttpHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHttpHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadHttpHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadHttpHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadHttpHosts(ctx, req.(*ReadHttpHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_CreateHttpHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHttpHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateHttpHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/CreateHttpHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateHttpHandler(ctx, req.(*CreateHttpHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_UpdateHttpHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHttpHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).UpdateHttpHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/UpdateHttpHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).UpdateHttpHandler(ctx, req.(*UpdateHttpHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_DeleteHttpHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHttpHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).DeleteHttpHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/DeleteHttpHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).DeleteHttpHandler(ctx, req.(*DeleteHttpHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_ReadHttpHandlers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHttpHandlersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).ReadHttpHandlers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/ReadHttpHandlers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).ReadHttpHandlers(ctx, req.(*ReadHttpHandlersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetServersStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetServersStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/GetServersStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetServersStats(ctx, req.(*GetServersStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetServerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetServerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/GetServerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetServerStats(ctx, req.(*GetServerStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetServersConnStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServersConnStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetServersConnStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/GetServersConnStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetServersConnStats(ctx, req.(*GetServersConnStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetServerConnStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerConnStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetServerConnStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/GetServerConnStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetServerConnStats(ctx, req.(*GetServerConnStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetHandlersStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHandlersStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetHandlersStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/GetHandlersStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetHandlersStats(ctx, req.(*GetHandlersStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetHandlerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetHandlerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Proxy/GetHandlerStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetHandlerStats(ctx, req.(*GetHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Proxy_ServiceDesc is the grpc.ServiceDesc for Proxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Proxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServer",
			Handler:    _Proxy_CreateServer_Handler,
		},
		{
			MethodName: "UpdateServer",
			Handler:    _Proxy_UpdateServer_Handler,
		},
		{
			MethodName: "DeleteServer",
			Handler:    _Proxy_DeleteServer_Handler,
		},
		{
			MethodName: "ReadServers",
			Handler:    _Proxy_ReadServers_Handler,
		},
		{
			MethodName: "CreateServerPool",
			Handler:    _Proxy_CreateServerPool_Handler,
		},
		{
			MethodName: "UpdateServerPool",
			Handler:    _Proxy_UpdateServerPool_Handler,
		},
		{
			MethodName: "DeleteServerPool",
			Handler:    _Proxy_DeleteServerPool_Handler,
		},
		{
			MethodName: "ReadServerPools",
			Handler:    _Proxy_ReadServerPools_Handler,
		},
		{
			MethodName: "CreateProxyFilter",
			Handler:    _Proxy_CreateProxyFilter_Handler,
		},
		{
			MethodName: "UpdateProxyFilter",
			Handler:    _Proxy_UpdateProxyFilter_Handler,
		},
		{
			MethodName: "DeleteProxyFilter",
			Handler:    _Proxy_DeleteProxyFilter_Handler,
		},
		{
			MethodName: "ReadProxyFilters",
			Handler:    _Proxy_ReadProxyFilters_Handler,
		},
		{
			MethodName: "CreateL4Handler",
			Handler:    _Proxy_CreateL4Handler_Handler,
		},
		{
			MethodName: "UpdateL4Handler",
			Handler:    _Proxy_UpdateL4Handler_Handler,
		},
		{
			MethodName: "DeleteL4Handler",
			Handler:    _Proxy_DeleteL4Handler_Handler,
		},
		{
			MethodName: "ReadL4Handlers",
			Handler:    _Proxy_ReadL4Handlers_Handler,
		},
		{
			MethodName: "CreateAcl",
			Handler:    _Proxy_CreateAcl_Handler,
		},
		{
			MethodName: "UpdateAcl",
			Handler:    _Proxy_UpdateAcl_Handler,
		},
		{
			MethodName: "DeleteAcl",
			Handler:    _Proxy_DeleteAcl_Handler,
		},
		{
			MethodName: "ReadAcls",
			Handler:    _Proxy_ReadAcls_Handler,
		},
		{
			MethodName: "CreateHttpPath",
			Handler:    _Proxy_CreateHttpPath_Handler,
		},
		{
			MethodName: "UpdateHttpPath",
			Handler:    _Proxy_UpdateHttpPath_Handler,
		},
		{
			MethodName: "DeleteHttpPath",
			Handler:    _Proxy_DeleteHttpPath_Handler,
		},
		{
			MethodName: "ReadHttpPaths",
			Handler:    _Proxy_ReadHttpPaths_Handler,
		},
		{
			MethodName: "CreateHttpHost",
			Handler:    _Proxy_CreateHttpHost_Handler,
		},
		{
			MethodName: "UpdateHttpHost",
			Handler:    _Proxy_UpdateHttpHost_Handler,
		},
		{
			MethodName: "DeleteHttpHost",
			Handler:    _Proxy_DeleteHttpHost_Handler,
		},
		{
			MethodName: "ReadHttpHosts",
			Handler:    _Proxy_ReadHttpHosts_Handler,
		},
		{
			MethodName: "CreateHttpHandler",
			Handler:    _Proxy_CreateHttpHandler_Handler,
		},
		{
			MethodName: "UpdateHttpHandler",
			Handler:    _Proxy_UpdateHttpHandler_Handler,
		},
		{
			MethodName: "DeleteHttpHandler",
			Handler:    _Proxy_DeleteHttpHandler_Handler,
		},
		{
			MethodName: "ReadHttpHandlers",
			Handler:    _Proxy_ReadHttpHandlers_Handler,
		},
		{
			MethodName: "GetServersStats",
			Handler:    _Proxy_GetServersStats_Handler,
		},
		{
			MethodName: "GetServerStats",
			Handler:    _Proxy_GetServerStats_Handler,
		},
		{
			MethodName: "GetServersConnStats",
			Handler:    _Proxy_GetServersConnStats_Handler,
		},
		{
			MethodName: "GetServerConnStats",
			Handler:    _Proxy_GetServerConnStats_Handler,
		},
		{
			MethodName: "GetHandlersStats",
			Handler:    _Proxy_GetHandlersStats_Handler,
		},
		{
			MethodName: "GetHandlerStats",
			Handler:    _Proxy_GetHandlerStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}
